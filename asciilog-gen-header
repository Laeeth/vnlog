#!/usr/bin/perl
use strict;
use warnings;

use feature ':5.10';
use String::ShellQuote;


my $template_set_field_value = <<'EOF';
#define asciilog_set_field_value__##fieldname##(x) _asciilog_set_field_value("##fieldname##", ##fieldidx##, ##fmt##, x)
EOF



my $argstring = shell_quote(@ARGV);

say <<EOF;
// Generated by
//     $0 $argstring

#pragma once

#include "asciilog.h"

EOF


my $legend = "#";
my $Nfields = @ARGV;

for my $field(@ARGV)
{
    my ($set_field_value, $name) = gen_field($field);
    print $set_field_value;

    $legend .= " $name";
}

say <<EOF;

#define asciilog_emit_legend()            _asciilog_emit_legend(\"$legend\\n\", $Nfields)
#define asciilog_emit_and_finish_record() _asciilog_emit_and_finish_record($Nfields)

EOF



sub gen_field
{
    my ($field) = @_;

    state $idx = 0;

    my %fmt_type =
      (
       'int'          => '"%d"',
       'int8_t'       => '"%"PRId8',
       'int16_t'      => '"%"PRId16',
       'int32_t'      => '"%"PRId32',
       'int64_t'      => '"%"PRId64',
       'unsigned int' => '"%u"',
       'unsigned'     => '"%u"',
       'uint8_t'      => '"%"PRIu8',
       'uint16_t'     => '"%"PRIu16',
       'uint32_t'     => '"%"PRIu32',
       'uint64_t'     => '"%"PRIu64',
       'char'         => '"%c"',
       'double'       => '"%f"',
       'const char*'  => '"%s"',
       'char*'        => '"%s"'
      );

    my ($type, $name) = $field =~ /(.+)  # A greedy string (may have spaces)
                                   \s+   # Some space
                                   (.+?) # A non-greedy string (no spaces)
                                  /x;
    if( $name =~ /[^a-zA-Z0-9_]/ )
    {
        die "Name can only have [a-zA-Z0-9_], but got '$name'";
    }

    $type =~ s/ +/ /g;   # replace all consecutive ' ' with a single space
    $type =~ s/ \*/\*/g; # ' *' -> '*'. so 'const char *' -> 'const char*'

    my $fmt = $fmt_type{$type} or die "Unknown type '$type'";

    my $set_field_value = $template_set_field_value;
    $set_field_value =~ s/##fieldname##/$name/g;
    $set_field_value =~ s/##fieldidx##/$idx/g;
    $set_field_value =~ s/##fmt##/$fmt/g;

    $idx++;

    return ($set_field_value, $name);
}

__END__

=head1 NAME

asciilog_gen_header - create templates for asciilog output

=head1 SYNOPSIS

 $ ./asciilog_gen_header 'int w' 'uint8_t x' 'char* y' 'double z'

=head1 DESCRIPTION

This does various things.

=head1 REQUIRED ARGUMENTS

=over

=item <input>

File to read the input from

=for Euclid:
  input.type: readable

=back

=head1 OPTIONS

=over

=item --col[umn] <column>

column for things

=for Euclid:
  column.type: integer, column >= 0 && column <= 2

=back

=head1 AUTHOR

Dima Kogan, C<< <dima@secretsauce.net> >>
