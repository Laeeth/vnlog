#!/usr/bin/perl
use strict;
use warnings;
use feature 'say';
use autodie;

use FindBin '$Bin';
use lib "$Bin/lib";

use List::Util 'all';
use Asciilog::Util qw(parse_options read_and_preparse_input reconstruct_substituted_command);




# This comes from the getopt_long() invocation in join.c in GNU coreutils
my @specs = ( # options with no args
             "ignore-case|i",
             "check-order",
             "nocheck-order",
             "zero-terminated|z",
             "header",

             # options that take an arg
             "a=s@", "e=s", "1=s", "2=s", "j=s", "o=s", "t=s", "v=s@",

             "help");

my %options_unsupported = ( 't' => <<'EOF',
asciilog is built on assuming a particular field separator
EOF
                            'e' => <<'EOF',
asciilog assumes - as an "undefined" field value. -e thus not allowed
EOF
                            'header' => <<'EOF',
asciilog already handles field headers; this is pointless
EOF

                            'zero-terminated' => <<'EOF'
asciilog is built on assuming a particular record separator
EOF
                          );

my ($filenames,$options) = parse_options(\@ARGV, \@specs);
for my $key(keys %$options)
{
    if($options_unsupported{$key})
    {
        my $keyname = length($key) == 1 ? "-$key" : "--$key";
        die("I don't support $keyname: $options_unsupported{$key}");
    }
}

if( scalar(@$filenames) != 2 )
{
    die "Exactly two inputs should have been given";
}
if(defined $options->{j} &&
   (defined $options->{1} || defined $options->{2}))
{
    die "Either (both -1 and -2) or -j MUST be given, but not both. -j is recommended";
}
if(( defined $options->{1} && !defined $options->{2}) ||
   (!defined $options->{1} &&  defined $options->{2}))
{
    die "Either (both -1 and -2) or -j MUST be given, but not both. -j is recommended";
}
if( defined $options->{1})
{
    if($options->{1} ne $options->{2})
    {
        die "-1 and -2 should refer to the same field. Using -j is recommended";
    }

    $options->{j} = $options->{1};
    delete $options->{1};
    delete $options->{2};
}

if( !defined $options->{j} )
{
    die "Either (both -1 and -2) or -j MUST be given, but not both. -j is recommended";
}

if( defined $options->{a} )
{
    my $N = scalar @{$options->{a}};
    if( $N < 1 || $N > 2 )
    {
        die "-a should have been passed at most 2 times";
    }

    if( !all {/^[12]$/} @{$options->{a}} )
    {
        die "-a MUST be given either 1 or 2";
    }
}
if( defined $options->{v} )
{
    my $N = scalar @{$options->{v}};
    if( $N < 1 || $N > 2 )
    {
        die "-v should have been passed at most 2 times";
    }

    if( !all {/^[12]$/} @{$options->{v}} )
    {
        die "-v MUST be given either 1 or 2";
    }
}


# asciilog uses - to represent empty fields
$options->{e} = '-';

if( !defined $options->{o} )
{
    # Some format MUST be given. Otherwise join doesn't respect -e
    $options->{o} = 'auto';
}

my $inputs = read_and_preparse_input($filenames);
my $keys_output = substitute_field_keys($options, $inputs);

my $ARGV_new = reconstruct_substituted_command($inputs, $options, \@specs);

say '# ' . join(' ', @$keys_output);
exec 'join', @$ARGV_new;




sub push_nonjoin_keys
{
    my ($keys_output, $keys, $key_join) = @_;
    for my $i (0..$#$keys)
    {
        if ( $keys->[$i] ne $key_join)
        {
            push @$keys_output, $keys->[$i];
        }
    }
}

sub substitute_field_keys
{
    # I handle -j and -o. Prior to this I converted -1 and -2 into -j

    my ($options, $inputs) = @_;



    # First I compute the field-index mapping for general imminent use
    my @key_indices;
    for my $i_input(0..$#$inputs)
    {
        my $keys = $inputs->[$i_input]{keys};
        my %key_indices_here;
        for my $i (0..$#$keys)
        {
            if( defined $key_indices_here{$keys->[$i]})
            {
                die "File '$inputs->[$i_input]{filename}' contains key '$keys->[$i]' more than once!";
            }
            $key_indices_here{$keys->[$i]} = $i + 1; # keys are indexed from 1
        }
        push @key_indices, \%key_indices_here;
    }



    # I convert -j into -1 and -2 because the two files might
    # have a given named field in a different position

    my $join_field_name = $options->{j};
    if(! exists $key_indices[0]{$join_field_name})
    {
        die "Requested key '$join_field_name' not found in the input asciilog '$inputs->[0]{filename}. Have known keys '@{$inputs->[0]{keys}}'";
    }
    if(! exists $key_indices[1]{$join_field_name})
    {
        die "Requested key '$join_field_name' not found in the input asciilog '$inputs->[1]{filename}. Have known keys '@{$inputs->[1]{keys}}'";
    }

    delete $options->{j};
    $options->{1} = $key_indices[0]{$join_field_name};
    $options->{2} = $key_indices[1]{$join_field_name};




    my @keys_out;
    if( defined $options->{o} and $options->{o} ne 'auto')
    {
        my @format_in  = split(/[ ,]/, $options->{o});
        my @format_out;
        for my $format_element(@format_in)
        {
            if( $format_element eq '0')
            {
                push @format_out, '0';
                push @keys_out, $join_field_name;
            }
            else
            {
                $format_element =~ /(.*)\.(.*)/ or die "-o given '$format_element', but each field must be either 'FILE.FIELD' or '0'";
                my ($file,$field) = ($1,$2);
                if($file ne '1' && $file ne '2')
                {
                    die "-o given '$format_element', where a field parsed to 'FILE.FIELD', but FILE must be either '1' or '2'";
                }
                if(! defined $key_indices[$file-1]{$field})
                {
                    die "-o given '$format_element', where a field parsed to 'FILE.FIELD', but FIELD '$field' doesn't exist in file '$inputs->[$file-1]{filename}. Have known keys '@{$inputs->[$file-1]{keys}}'";
                }

                push @format_out, "$file.$key_indices[$file-1]{$field}";
                push @keys_out, $field;
            }
        }

        $options->{o} = join(',', @format_out);
    }
    else
    {
        # automatic field ordering. I.e
        #   join field
        #   all non-join fields from file1, in order
        #   all non-join fields from file2, in order
        push @keys_out, $join_field_name;

        push_nonjoin_keys(\@keys_out, $inputs->[0]{keys}, $join_field_name);
        push_nonjoin_keys(\@keys_out, $inputs->[1]{keys}, $join_field_name);
    }

    return \@keys_out;
}




__END__

=head1 NAME

asciilog-join - joins two log files on a particular field

=head1 SYNOPSIS


 $ cat a.asciilog
 # a b
 AA 11
 bb 12
 CC 13
 dd 14
 dd 123

 $ cat b.asciilog
 # a c
 aa 1
 cc 3
 bb 4
 ee 5
 - 23

 Try to join unsorted data on field 'a':
 $ asciilog-join -j a a.asciilog b.asciilog
 # a b c
 join: /dev/fd/5:3: is not sorted: CC 13
 join: /dev/fd/6:3: is not sorted: bb 4

 Sort the data, and join on 'a':
 $ asciilog-join -j a <(asciilog-sort -ka a.asciilog) <(asciilog-sort -ka b.asciilog) | asciilog-align
 # a b  c
 bb  12 4

 Sort the data, and join on 'a', ignoring case:
 $ asciilog-join -i -j a <(asciilog-sort -f -ka a.asciilog) <(asciilog-sort -f -ka b.asciilog) | asciilog-align
 # a b c
 AA 11 1
 bb 12 4
 CC 13 3

 Sort the data, and join on 'a'. Also print the unmatched lines from both files:
 $ asciilog-join -ja -a1 -a2 <(asciilog-sort -ka a.asciilog) <(asciilog-sort -ka b.asciilog) | asciilog-align
 # a b   c
 -   -   23
 AA   11 -
 CC   13 -
 aa  -    1
 bb   12  4
 cc  -    3
 dd  123 -
 dd   14 -
 ee  -    5

 Sort the data, and join on 'a'. Print the unmatched lines from both files, Output ONLY colum 'c' from the 2nd input:
 $ asciilog-join -ja -a1 -a2 -o 2.c <(asciilog-sort -ka a.asciilog) <(asciilog-sort -ka b.asciilog) | asciilog-align
 # c
 23
 -
 -
  1
  4
  3
 -
 -
  5

=head1 DESCRIPTION

  Usage: asciilog-join [options] logfile1 logfile2

This tool joins two asciilog files on a given field. C<asciilog-join> is a
wrapper around the GNU coreutils C<join> tool. Since this is a wrapper, most
commandline options and behaviors of the C<join> tool are present; consult the
L<join(1)> manpage for detail. The differences from GNU coreutils C<join> are

=over

=item *

The input and output to this tool are asciilog files, complete with a legend

=item *

The columns are referenced by name, not index. So instead of saying

  join -j1

to join on the first column, you say

  join -j time

to join on column "time".

=item *

C<-1> and C<-2> are supported, but I<must> refer to the same field. Since
asciilog knows the identify of each field, it makes no sense for C<-1> and C<-2>
to be different. So pass C<-j> instead, it makes more sense in this context.

=item *

If no C<-o> is given, we pass C<-o auto> to make sure that missing data is shown
as C<->.

=item *

C<-e> is not supported because asciilog uses C<-> to represent undefined fields.

=item *

C<--header> is not supported because asciilog assumes a specific header
structure, and C<asciilog-sort> makes sure that this header is handled properly

=item *

C<-t> is not supported because asciilog assumes whitespace-separated fields

=item *

C<--zero-terminated> is not supported because asciilog assumes newline-separated
records

=back

Past that, everything C<join> does is supported, so see that man page for
detailed documentation. Note that all non-legend comments are stripped out,
since it's not obvious where they should end up.

=head1 BUGS

This and the other C<asciilog-xxx> tools that wrap coreutils are written
specifically to work with the Linux kernel and the GNU coreutils. None of these
have been tested with BSD tools or with non-Linux kernels, and I'm sure things
don't just work. If you want this support, please send me nice patches :)

=head1 SEE ALSO

L<join(1)>

=head1 REPOSITORY

https://github.com/dkogan/asciilog/

=head1 AUTHOR

Dima Kogan C<< <dima@secretsauce.net> >>

=head1 LICENSE AND COPYRIGHT

Copyright 2018 Dima Kogan C<< <dima@secretsauce.net> >>

This library is free software; you can redistribute it and/or modify it under
the terms of the GNU Lesser General Public License as published by the Free
Software Foundation; either version 2.1 of the License, or (at your option) any
later version.

=cut
