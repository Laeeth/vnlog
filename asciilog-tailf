#!/bin/bash

usage="Usage: $0 [arguments passed to tail] logfile"

if [[ $# < 1 ]]; then
    echo "Need at least one argument" > /dev/stderr
    echo $usage > /dev/stderr
    exit 1
fi
# this is a bash-ism. Will not work in sh or in zsh
logfile="${!#}"

if ! [[ -r "$logfile" ]]; then # last argument not readable
    echo "Last argument should be readable (assumed to be the log file)" > /dev/stderr
    echo $usage > /dev/stderr
    exit 1
fi



<$logfile awk '{print} /^# / { exit }' # print everything until we see the
                                       # legend
tail -f  $@


# POD documentation that will become a manpage
: <<=cut

=head1 NAME

asciilog-tailf - tails a log file, preserving the legend

=head1 SYNOPSIS

 $ asciilog-tailf tst.asciilog
 # x y z
 1 2 3
 ...

=head1 DESCRIPTION

The basic usage is

 asciilog-tailf [arguments passed to tail] logfile

The last argument is assumed to be the log file, and all the preceding arguments
are passed to <tail> verbatim.

A common asciilog use case is to run a data-generating process, C<tee> the
output to a log file, while plotting some of the results:

 $ run_widget | tee tst.asciilog | asciilog-filter quality | feedgnuplot --stream

As this runs, maybe we want to make a realtime plot of some other fields in teh
log. We thus need to create a pipe that produces the data as it comes in.
Generall the C<tail> tool can do this if invoked with the C<-f> option. But this
would just print the trailing log lines as they come in, and it would I<not>
print the legend, which is at the start of the file. This legend is needed to
keep our column labels, so that we can process the log with other tools. To do
that, we can use this tool instead of a plain C<tail -f>. This tool simply
prints out the log until it sees a legend (inclusively), and then runs the
C<tail -f> as usual. So we can do

 $ asciilog-tailf tst.asciilog | asciilog-filter x y z | feedgnuplot --stream --3d --lines

This usage will start printing out all the data written to the log file as it
comes in. Thus all data that is I<already> in the log is ignored. If this is
undesireable, we can use the fact that this tool is a very thin wrapper around
the C<tail> utility, and all aruments are passed to C<tail> verbatim. It is
possible to ask C<tail> to print out all lines except the first (so that we
don't print the legend twice, assuming the legend is on the first line) and
I<then> to output new data:

 $ asciilog-tailf -n+2 tst.asciilog | ....

=head1 REQUIRED ARGUMENTS

We need the log file as the only argument

=head1 REPOSITORY

https://github.jpl.nasa.gov/maritime-robotics/asciilog/

=head1 AUTHOR

Dima Kogan C<< <Dmitriy.Kogan@jpl.nasa.gov> >>

=head1 LICENSE AND COPYRIGHT

Proprietary. Copyright 2016 California Institute of Technology

=cut
