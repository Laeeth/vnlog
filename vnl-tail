#!/usr/bin/perl
use strict;
use warnings;
use feature 'say';
use autodie;

use FindBin '$Bin';
use lib "$Bin/lib";

use Vanillog::Util qw(parse_options read_and_preparse_input ensure_all_legends_equivalent close_inputs);



# This comes from the struct option long_options in tail.c in GNU coreutils
my @specs = ( # options with no args
             "silent|quiet|q",
             "zero-terminated|z",
             "verbose|v",
             "retry",
             "F",
             "f",

             # options with args
             "bytes|c=s",
             "lines|n=s",
             "sleep-interval|s=f",
             "max-unchanged-stats=i",
             "pid=i",

             # special-case options. Kinda take args
             "follow:s",

             "help");




my %options_unsupported = ( 'bytes' => <<'EOF',
vanillog is line-oriented, so I refuse to split lines
EOF
                            'zero-terminated' => <<'EOF'
vanillog is built on assuming a particular record separator
EOF
                          );

# 'tail --follow' works somewhat non-standardly. It takes an optional argument,
# but this argument MUST be given as '--follow=xxx', NOT '--follow xxx'. My
# option parser erroneously accepts both, so I make sure that I don't accept
# '--follow something' by putting --follow at the end of the argument list
my @ifollow = grep { $ARGV[$_] =~ /^--follow/ } 0..$#ARGV;
if( @ifollow )
{
    if( @ifollow > 1 )
    {
        die "--follow given more than once. I'm easily confused, so I give up.";
    }

    my $i = $ifollow[0];
    if( $ARGV[$i] !~ /^--follow=/ )
    {
        # we have a --follow that's NOT a --follow=something. I put it at the
        # end to make sure that I don't assign anything to it
        my $last = $ARGV[$#ARGV];
        $ARGV[$#ARGV] = $ARGV[$i];
        $ARGV[$i] = $last;
    }
}
my ($filenames,$options) = parse_options(\@ARGV, \@specs);

if( defined $options->{follow}         &&
    length($options->{follow}) > 0     &&
    $options->{follow} ne 'name'       &&
    $options->{follow} ne 'descriptor' )
{
    if(grep /^--follow=/, @ARGV)
    {
        die "--follow can be given ONLY --follow=name or --follow=descriptor";
    }

    use Data::Dumper;
    die "$0 got confused. Please report this to the maintainer: ARGV: " . Dumper \@ARGV;
}



for my $key(keys %$options)
{
    if($options_unsupported{$key})
    {
        my $keyname = length($key) == 1 ? "-$key" : "--$key";
        die("I don't support $keyname: $options_unsupported{$key}");
    }
}

my $inputs = read_and_preparse_input($filenames, 1);
ensure_all_legends_equivalent($inputs);
say '# ' . join(' ', @{$inputs->[0]{keys}});

# I exec with the original command. I.e. I do NOT substitute filenames. This
# allows --follow=name to work. The only thing I do here is to make absolutely
# sure the legend is reported correctly
close_inputs($inputs);
exec 'tail', @ARGV;


__END__

=head1 NAME

vnl-tail - tail a log file, preserving the legend

=head1 SYNOPSIS

 $ read_temperature | tee temp.vnl
 # temperature
 29.5
 30.4
 28.3
 22.1
 ... continually produces data

 ... at the same time, in another terminal
 $ vnl-tail -f temp.vnl
 # temperature
 28.3
 22.1
 ... outputs data as it comes in

=head1 DESCRIPTION

  Usage: vnl-tail [options] logfile logfile logfile ... < logfile

This tool runs tail on given vanillog files in various ways. C<vnl-tail> is
a wrapper around the GNU coreutils C<tail> tool. Since this is a wrapper, most
commandline options and behaviors of the C<tail> tool are present; consult the
L<tail(1)> manpage for detail. The differences from GNU coreutils C<tail> are

=over

=item *

The input and output to this tool are vanillog files, complete with a legend

=item *

C<-c> is not supported because vanillog really doesn't want to break up lines

=item *

C<--zero-terminated> is not supported because vanillog assumes
newline-separated records

=back

Past that, everything C<tail> does is supported, so see that man page for
detailed documentation.

=head1 BUGS

This and the other C<vnl-xxx> tools that wrap coreutils are written
specifically to work with the Linux kernel and the GNU coreutils. None of these
have been tested with BSD tools or with non-Linux kernels, and I'm sure things
don't just work. If you want this support, please send me nice patches :)

=head1 SEE ALSO

L<tail(1)>

=head1 REPOSITORY

https://github.com/dkogan/vanillog/

=head1 AUTHOR

Dima Kogan C<< <dima@secretsauce.net> >>

=head1 LICENSE AND COPYRIGHT

Copyright 2018 Dima Kogan C<< <dima@secretsauce.net> >>

This library is free software; you can redistribute it and/or modify it under
the terms of the GNU Lesser General Public License as published by the Free
Software Foundation; either version 2.1 of the License, or (at your option) any
later version.

=cut
