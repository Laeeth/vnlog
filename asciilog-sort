#!/usr/bin/perl
use strict;
use warnings;
use feature 'say';
use autodie;

use FindBin '$Bin';
use lib "$Bin/lib";

use Asciilog::Util qw(parse_options interpret_argv ensure_all_legends_equivalent reconstruct_substituted_command);




# This comes from the struct option long_options in sort.c in GNU coreutils
my @specs = ( # options with no args
              "ignore-leading-blanks|b",
              "debug",
              "dictionary-order|d",
              "ignore-case|f",
              "general-numeric-sort|g",
              "ignore-nonprinting|i",
              "merge|m",
              "month-sort|M",
              "numeric-sort|n",
              "human-numeric-sort|h",
              "version-sort|V",
              "random-sort|R",
              "reverse|r",
              "stable|s",
              "unique|u",
              "zero-terminated|z",

              # options with args
              "compress-program=s",
              "files0-from=s",
              "key|k=s",
              "random-source=s",
              "sort=s",
              "output|o=s",
              "batch-size=s",
              "buffer-size|S=s",
              "field-separator|t=s",
              "temporary-directory|T=s",
              "parallel=s",

              # special-case options. Kinda take args
              "check:s",
              "c|C",

              "help");

my %options_unsupported = ( 'files0-from' => <<'EOF',
Support for this could be added but has not been (yet)
EOF

                            'output'      => <<'EOF',
Can't support this. sort calls ftruncate(file), so if I write out the legend
before calling sort, this is clobbered. Or if I use a pipe, the ftruncate() will
fail and sort barfs
EOF
                            'field-separator' => <<'EOF',
asciilog is built on assuming a particular field separator
EOF
                            'zero-terminated' => <<'EOF'
asciilog is built on assuming a particular record separator
EOF
                          );

my ($filenames,$options) = parse_options(\@ARGV, \@specs);
for my $key(keys %$options)
{
    if($options_unsupported{$key})
    {
        my $keyname = length($key) == 1 ? "-$key" : "--$key";
        die("I don't support $keyname: $options_unsupported{$key}");
    }
}

$options->{'ignore-leading-blanks'} = 1;

my $inputs = interpret_argv($filenames);
ensure_all_legends_equivalent($inputs);
substitute_field_keys($options, $inputs->[0]{keys});
my $ARGV_new = reconstruct_substituted_command($inputs, $options, \@specs);

say '# ' . join(' ', @{$inputs->[0]{keys}});
exec 'sort', @$ARGV_new;


sub substitute_field_keys
{
    my ($options, $keys) = @_;

    return unless defined $options->{key};

    my %key_indices;
    for my $i(0..$#$keys)
    {
        $key_indices{$keys->[$i]} = $i + 1; # keys are indexed from 1
    }

    # manpage of sort says that key definitions are given as
    # "F[.C][OPTS][,F[.C][OPTS]]"
    my @keyspecs = split(',', $options->{key});

    $options->{key} =
      join(',',
           map
           {
               /^([^\.]+)(\..+)?$/ or die "Couldn't parse '$_' as a sort KEYDEF";

               my $extra = $2 // '';
               if (!exists $key_indices{$1})
               {
                   die "Requested key '$1' not found in the input asciilogs. Have known keys '@$keys'";
               }

               $key_indices{$1} . $extra;
           }
           @keyspecs);
}

__END__



# finish docs
# bsd sort?
# comm, sort, join, paste, split


=head1 NAME

asciilog-sort - sorts a log file, preserving the legend

=head1 SYNOPSIS

 $ asciilog-sort tst.asciilog
 # x y z
 1 2 3
 ...

=head1 DESCRIPTION

The basic usage is

 asciilog-sort [arguments passed to sort] logfile

The last argument is assumed to be the log file, and all the preceding arguments
are passed to <sort> verbatim.

A common asciilog use case is to run a data-generating process, C<tee> the
output to a log file, while plotting some of the results:

 $ run_widget | tee tst.asciilog | asciilog-filter quality | feedgnuplot --stream

As this runs, maybe we want to make a realtime plot of some other fields in teh
log. We thus need to create a pipe that produces the data as it comes in.
Generall the C<sort> tool can do this if invoked with the C<-f> option. But this
would just print the trailing log lines as they come in, and it would I<not>
print the legend, which is at the start of the file. This legend is needed to
keep our column labels, so that we can process the log with other tools. To do
that, we can use this tool instead of a plain C<sort -f>. This tool simply
prints out the log until it sees a legend (inclusively), and then runs the
C<sort -f> as usual. So we can do

 $ asciilog-sort tst.asciilog | asciilog-filter x y z | feedgnuplot --stream --3d --lines

This usage will start printing out all the data written to the log file as it
comes in. Thus all data that is I<already> in the log is ignored. If this is
undesireable, we can use the fact that this tool is a very thin wrapper around
the C<sort> utility, and all aruments are passed to C<sort> verbatim. It is
possible to ask C<sort> to print out all lines except the first (so that we
don't print the legend twice, assuming the legend is on the first line) and
I<then> to output new data:

 $ asciilog-sort -n+2 tst.asciilog | ....

=head1 REQUIRED ARGUMENTS

We need the log file as the only argument

=head1 REPOSITORY

https://github.com/dkogan/asciilog/

=head1 AUTHOR

Dima Kogan C<< <dima@secretsauce.net> >>

=head1 LICENSE AND COPYRIGHT

Copyright 2016 California Institute of Technology.
Copyright 2017 Dima Kogan

This library is free software; you can redistribute it and/or modify it under
the terms of the GNU Lesser General Public License as published by the Free
Software Foundation; either version 2.1 of the License, or (at your option) any
later version.

=cut
